<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>media | Samuel Langton</title>
    <link>/tag/media/</link>
      <atom:link href="/tag/media/index.xml" rel="self" type="application/rss+xml" />
    <description>media</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 31 Mar 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu347c2c227070d4d829f6f2e71f22c263_2514_512x512_fill_lanczos_center_3.png</url>
      <title>media</title>
      <link>/tag/media/</link>
    </image>
    
    <item>
      <title>Scraping &#39;most read&#39; stories from the BBC</title>
      <link>/post/bbc_scrapes/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      <guid>/post/bbc_scrapes/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I have had a long-time fascination with the BBC website’s top ten &lt;a href=&#34;https://www.bbc.com/news&#34;&gt;most read&lt;/a&gt; table. The most trivial of stories appear to usurp critical world events, spending hours (or days) at number one. Stories also seemingly disappear or reappear under different names. Assuming the table is dictated entirely by users’ clicks, it is a window into the priorities and interests of BBC’s readership. It is also possible that there is some manipulation by editors, such as adding a weighting (e.g., newer stories do not need as many clicks to enter the top 10 compared to older stories). Either way, it’s pretty interesting.&lt;/p&gt;
&lt;p&gt;Without behind-the-scenes access to what is actually going on, I began scraping the top 10 ‘most read’ table from the BBC website (thanks to &lt;a href=&#34;https://nscr.nl/en/medewerker/danielle-stibbe-msc/&#34;&gt;Danielle Stibbe&lt;/a&gt; for help on HTML nodes!). The scrape ran every five minutes, 24 hours a day. The time span is patchy due to my own errors and IT trouble, but on-and-off it runs from November 2023 to February 2024. On each scrape, a script cleans and saves the top ten table as a .csv file. Later versions of the script also include the URL of the story itself. That’s a lot of information – far too much for me to know what do with. I’ve made the data &lt;a href=&#34;https://github.com/langtonhugh/bbc_scrape&#34;&gt;completely open&lt;/a&gt; so that people with more time and expertise than me can make use of it for research or teaching. If you do make use of it, please let me know!&lt;/p&gt;
&lt;p&gt;For now, here’s a brief demonstration of the scraped data. All of these findings can be reproduced and edited (for your own topics of interest) using the data and code on the &lt;a href=&#34;https://github.com/langtonhugh/bbc_scrape&#34;&gt;GitHub repository&lt;/a&gt;. I’ve used an example time period of 10 January to 9 February, 2024. This is one month of continuous scraping (~8,500 files).&lt;/p&gt;
&lt;p&gt;A very obvious thing you can do is just look at the number of scrapes – and therefore, the amount of time – that stories spent in the top ten during the scraping period. To do this, I just calculate the number of scrapes within which the story was featured (in the table: &lt;strong&gt;n&lt;/strong&gt;) and then multiply by five (minutes). This of course assumes that, if a story appeared in a scrape, it remained in the top ten for five minutes. Here, then, we can see the story that spent longest in the top ten (~40 hours) was about protesters throwing soup at a painting, joint with a story about some twins on TikTok. To me, this is surprisingly dynamic: things do not stick around in the top ten long.&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;
&lt;span id=&#34;tab:unnamed-chunk-1&#34;&gt;Table 1: &lt;/span&gt;Number of scrapes and time spent in top ten. Only the five longest-spending stories are shown here.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
article_title
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
mins
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
hrs
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Protesters throw soup at Mona Lisa painting
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
483
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2415
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Twins separated and sold at birth reunited by TikTok
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
483
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2415
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Swedish alarm after defence chiefs’ war warning
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
458
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2290
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Huge ancient city found in the Amazon
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
437
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2185
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.4
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Stunning shot of polar bear drifting to sleep wins award
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
430
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2150
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.8
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can do the same thing but for each ranking position (i.e., one to ten). Here, we subset only for those stories that ever reached number one. Note that this relies on a similar assumption about time in-between scrapes.&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;
&lt;span id=&#34;tab:unnamed-chunk-2&#34;&gt;Table 2: &lt;/span&gt;For stories that reached number one only. Five longest-spending stories are shown.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
article_title
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
mins
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
hrs
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Twins separated and sold at birth reunited by TikTok
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
165
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
825
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.8
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Swedish alarm after defence chiefs’ war warning
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
158
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
790
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Protesters throw soup at Mona Lisa painting
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
139
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
695
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Netanyahu publicly rejects US push for Palestinian state
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
136
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
680
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.3
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
King Charles diagnosed with cancer
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
135
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
675
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;My favourite thing is to visualize the sequence of story rankings during the time period for specific topics. I do this simply by using a basic string detect for keywords. To keep the visual simple, I limit the number of individual stories visualized to six. This leaves room for an ‘Unrelated’ category (i.e., not keywords) and an ‘Other’ category for the least common but still related stories (if there are any). You can amend this as wished using the &lt;a href=&#34;https://github.com/langtonhugh/bbc_scrape/blob/main/scripts/web_post_single_topic.R&#34;&gt;script&lt;/a&gt;. This script is as automated as I can make it: it will update according to the time period, number of stories, and keywords used. Below, we visualize the sequences of stories involving the term ‘Taylor Swift’ during the entire month.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langtonhugh/bbc_scrape/main/visuals/interest_tile_taylor_swift.png&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Or something that we’ve already seen is popular: TikTok. Note that this is all case-insensitive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langtonhugh/bbc_scrape/main/visuals/interest_tile_tiktok.png&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;We can also select specific days and use multiple keywords. In this case, we capture a handful of words relating to Ukraine-Russia on 31 January, 2024.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langtonhugh/bbc_scrape/main/visuals/interest_tile_ukraine_russia_putin_zalensky.png&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Obviously, there is far more that can be done with this data, but this provides a brief overview. One thing I have explored is comparing two topics over time (see &lt;a href=&#34;https://github.com/langtonhugh/bbc_scrape/blob/main/scripts/web_post_compare.R&#34;&gt;script&lt;/a&gt;). This way, you could assess whether certain topics decline in popularity over time, at the expense of others. For lengthy scraping periods, I think the data will require much more data handling to simplify before making a meaningful visual, or more sophisticated text analysis to identify clusters of stories. Anyway, please feel free to explore the data yourself. If you have any interesting ideas, or use the data for something fun, please do get in touch!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
